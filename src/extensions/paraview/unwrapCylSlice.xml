<ServerManagerConfiguration>
  <ProxyGroup name="filters">
    <SourceProxy name="UnwrapCylSlice" class="vtkPythonProgrammableFilter" label="UnwrapCylSlice">
      <Documentation
        long_help="Unwrap a propeller blade section"
        short_help="Unwrap a propeller blade section">
      </Documentation>

      <InputProperty
        name="Input"
        command="SetInputConnection">
          <ProxyGroupDomain name="groups">
            <Group name="sources"/>
            <Group name="filters"/>
          </ProxyGroupDomain>

          <DataTypeDomain name="input_type">
            <DataType value="vtkUnstructuredGrid"/>
          </DataTypeDomain>
      </InputProperty>

      <DoubleVectorProperty
        name="eax"
        label="eax"
        initial_string="eax"
        command="SetParameter"
        animateable="1"
        default_values="0.0 0.0 1.0"
        number_of_elements="3">
        <Documentation></Documentation>
      </DoubleVectorProperty>


      <DoubleVectorProperty
        name="er"
        label="er"
        initial_string="er"
        command="SetParameter"
        animateable="1"
        default_values="1.0 0.0 0.0"
        number_of_elements="3">
        <Documentation></Documentation>
      </DoubleVectorProperty>


      <DoubleVectorProperty
        name="p0"
        label="p0"
        initial_string="p0"
        command="SetParameter"
        animateable="1"
        default_values="0.0 0.0 0.0"
        number_of_elements="3">
        <Documentation></Documentation>
      </DoubleVectorProperty>


      <!-- Output data type: "vtkUnstructuredGrid" -->
      <IntVectorProperty command="SetOutputDataSetType"
                         default_values="4"
                         name="OutputDataSetType"
                         number_of_elements="1"
                         panel_visibility="never">
        <Documentation>The value of this property determines the dataset type
        for the output of the programmable filter.</Documentation>
      </IntVectorProperty>

      <StringVectorProperty
        name="Script"
        command="SetScript"
        number_of_elements="1"
        default_values="&#xA;import numpy as np  &#xA;&#xA;pdi = self.GetInputDataObject(0,0)&#xA;pdo = self.GetOutputDataObject(0)&#xA;pdo.ShallowCopy(pdi)&#xA;&#xA;numPoints = pdi.GetNumberOfPoints() &#xA;Urel=pdi.GetPointData().GetArray(&quot;Urel&quot;)&#xA;&#xA;&#xA;# convert into numpy array for vector ops&#xA;eax=np.array(eax) &#xA;er=np.array(er)&#xA;etan=np.cross(eax,er)&#xA;&#xA;# copy fields into numpy lists&#xA;p=np.array([pdi.GetPoint(i)[:3] for i in range(0, numPoints)]) -p0&#xA;urel=np.array([Urel.GetTuple3(i) for i in range(0, numPoints)])&#xA;&#xA;r=np.sqrt(np.dot(p,er)**2+np.dot(p,etan)**2)&#xA;z=np.dot(p,eax)&#xA;theta=np.arctan2(np.dot(p,er), np.dot(p,etan))&#xA;&#xA;ct=np.cos(theta).reshape((numPoints,1))&#xA;st=np.sin(theta).reshape((numPoints,1))&#xA;&#xA;o=np.ones((numPoints,3))&#xA;er_local=(er*o)*ct + (etan*o)*st&#xA;etan_local=(etan*o)*ct - (er*o)*st&#xA;&#xA;#print np.dot(urel,er_local)&#xA;urel_flat = np.transpose( np.array([&#xA;    np.sum(urel*er_local,axis=1),&#xA;    np.sum(urel*etan_local,axis=1),&#xA;    np.dot(urel,eax)&#xA;    ]) )&#xA;&#xA;# create field for transformed points&#xA;newPoints = vtk.vtkPoints() &#xA;&#xA;# add new vector field&#xA;Urf=vtk.vtkDoubleArray()&#xA;Urf.SetName(&quot;Urel_flat&quot;)&#xA;Urf.SetNumberOfComponents(3) &#xA;&#xA;for i in range(0, numPoints):&#xA;    newPoints.InsertNextPoint(r[i], r[i]*theta[i], z[i])&#xA;    Urf.InsertNextTupleValue(urel_flat[i])&#xA;&#xA;pdo.SetPoints(newPoints)&#xA;pdo.GetPointData().AddArray(Urf)&#xA;"
        panel_visibility="advanced">
        <Hints>
         <Widget type="multi_line"/>
       </Hints>
      <Documentation>This property contains the text of a python program that
      the programmable source runs.</Documentation>
      </StringVectorProperty>


    </SourceProxy>
 </ProxyGroup>
</ServerManagerConfiguration>
